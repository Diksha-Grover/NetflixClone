{"ast":null,"code":"var _jsxFileName = \"/home/dikshagrover2/NetflixClone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// imports DEFAULT(alias) export from axios.js\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\n\n// Row component\nfunction Row({\n  title,\n  fetchURL,\n  isLargeRow\n}) {\n  _s();\n  /* Creating a movie state (short term memory) */\n  const [movies, setMovies] = useState([]);\n  /* Creating a trailer state (short term memory) */\n  const [trailerURL, setTrailerURL] = useState(\"\");\n  //   Pulling information from tmdb API when the pages loads\n  useEffect(() => {\n    //   Running async call\n    async function fetchData() {\n      // Waiting for the promise to come back with movie results, fetchURL(outside the code block)\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n    // if [empty], run once when the row loads, and dont run again\n    fetchData();\n  }, [fetchURL]);\n  //   console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  //   When user clicks on the movie picture\n  const handleClick = movie => {\n    //   If trailer is found clear the url\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      // Search for movie trailer full url\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        // https://www.youtube.com/watch?v=aSØDÆømlsdæ\n        const urlParams = new URLSearchParams(new URL(url).search); // urlParams gives us everthing after the ?\n        setTrailerURL(urlParams.get(\"v\")); //urlParams gives us everything after v=\n        // Displays error message if unable to find url\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie =>\n      /*#__PURE__*/\n      //   returns movie images in new array\n      _jsxDEV(\"img\", {\n        // Setting up onClick event for trailer\n        onClick: () => handleClick(movie)\n        // All poster same size (row__poster) except if you are larger row, then use\n        // isLargeRow\n        ,\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`\n        // Loads poster images from base url\n        ,\n        src: `${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), trailerURL && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerURL,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n// Exporting Row function. Making it available\n_s(Row, \"El1rNDxgae4Ska+KIjJJpKJIUDM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","jsxDEV","_jsxDEV","base_URL","Row","title","fetchURL","isLargeRow","_s","movies","setMovies","trailerURL","setTrailerURL","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["/home/dikshagrover2/NetflixClone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// imports DEFAULT(alias) export from axios.js\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\n\n// Row component\nfunction Row({ title, fetchURL, isLargeRow }) {\n  /* Creating a movie state (short term memory) */\n  const [movies, setMovies] = useState([]);\n  /* Creating a trailer state (short term memory) */\n  const [trailerURL, setTrailerURL] = useState(\"\");\n  //   Pulling information from tmdb API when the pages loads\n  useEffect(() => {\n    //   Running async call\n    async function fetchData() {\n      // Waiting for the promise to come back with movie results, fetchURL(outside the code block)\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n    // if [empty], run once when the row loads, and dont run again\n    fetchData();\n  }, [fetchURL]);\n  //   console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  //   When user clicks on the movie picture\n  const handleClick = (movie) => {\n    //   If trailer is found clear the url\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      // Search for movie trailer full url\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          // https://www.youtube.com/watch?v=aSØDÆømlsdæ\n          const urlParams = new URLSearchParams(new URL(url).search); // urlParams gives us everthing after the ?\n          setTrailerURL(urlParams.get(\"v\")); //urlParams gives us everything after v=\n          // Displays error message if unable to find url\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      {/* Container for movie rows */}\n      <div className=\"row__posters\">\n        {/* several row poster */}\n        {/* Looping through movies array API */}\n        {movies.map((movie) => (\n          //   returns movie images in new array\n          <img\n            //   \"key\" loads movie row faster knowing the movie id\n            key={movie.id}\n            // Setting up onClick event for trailer\n            onClick={() => handleClick(movie)}\n            // All poster same size (row__poster) except if you are larger row, then use\n            // isLargeRow\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            // Loads poster images from base url\n            src={`${base_URL}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n        {/* Contain -> posters */}\n      </div>\n      {/* Embedding youtube movie trailers to show */}\n      {trailerURL && <YouTube videoId={trailerURL} opts={opts} />}\n    </div>\n  );\n}\n\n// Exporting Row function. Making it available\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}