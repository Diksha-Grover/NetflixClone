{"ast":null,"code":"import React,{useState,useEffect}from\"react\";// imports DEFAULT(alias) export from axios.js\nimport axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const base_URL=\"https://image.tmdb.org/t/p/original/\";// Row component\nfunction Row(_ref){let{title,fetchURL,isLargeRow}=_ref;const[movies,setMovies]=useState([]);const[trailerURL,setTrailerURL]=useState(\"\");useEffect(()=>{async function fetchData(){// Waiting for the promise to come back with movie results, fetchURL(outside the code block)\nconst request=await axios.get(fetchURL);setMovies(request.data.results);return request;}fetchData();},[fetchURL]);const opts={height:\"390\",width:\"100%\",playerVars:{// setting autoplay to 1 will start playing the video automatically\nautoplay:1}};console.log('trailerURL',trailerURL);//   When user clicks on the movie picture\nconst handleClick=movie=>{//   If trailer is found clear the url\nif(trailerURL){setTrailerURL(\"\");}else{// Search for movie trailer full url\nmovieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(url=>{const urlParams=new URLSearchParams(new URL(url).search);// urlParams gives us everthing after the ?\nsetTrailerURL(urlParams.get(\"v\"));//urlParams gives us everything after v=\n// Displays error message if unable to find url\n}).catch(error=>console.log(error));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(movie=>/*#__PURE__*/ //   returns movie images in new array\n_jsx(\"img\",{// Setting up onClick event for trailer\nonClick:()=>handleClick(movie)// All poster same size (row__poster) except if you are larger row, then use\n// isLargeRow\n,className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\")// Loads poster images from base url\n,src:\"\".concat(base_URL).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id))}),trailerURL&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerURL,opts:opts})]});}export default Row;","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","jsx","_jsx","jsxs","_jsxs","base_URL","Row","_ref","title","fetchURL","isLargeRow","movies","setMovies","trailerURL","setTrailerURL","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","console","log","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","className","children","map","onClick","concat","src","poster_path","backdrop_path","alt","id","videoId"],"sources":["/home/dikshagrover2/NetflixClone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// imports DEFAULT(alias) export from axios.js\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\n\n// Row component\nfunction Row({ title, fetchURL, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerURL, setTrailerURL] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      // Waiting for the promise to come back with movie results, fetchURL(outside the code block)\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchURL]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // setting autoplay to 1 will start playing the video automatically\n      autoplay: 1,\n    },\n  };\n\n  console.log('trailerURL',trailerURL)\n\n  //   When user clicks on the movie picture\n  const handleClick = (movie) => {\n    //   If trailer is found clear the url\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      // Search for movie trailer full url\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search); // urlParams gives us everthing after the ?\n          setTrailerURL(urlParams.get(\"v\")); //urlParams gives us everything after v=\n          // Displays error message if unable to find url\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      {/* Container for movie rows */}\n      <div className=\"row__posters\">\n        {/* several row poster */}\n        {/* Looping through movies array API */}\n        {movies.map((movie) => (\n          //   returns movie images in new array\n          <img\n            //   \"key\" loads movie row faster knowing the movie id\n            key={movie.id}\n            // Setting up onClick event for trailer\n            onClick={() => handleClick(movie)}\n            // All poster same size (row__poster) except if you are larger row, then use\n            // isLargeRow\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            // Loads poster images from base url\n            src={`${base_URL}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n        {/* Contain -> posters */}\n      </div>\n      {trailerURL && <YouTube videoId={trailerURL} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}